
 pipeline {
    agent any 
    tools {
        maven 'maven3.8.5'
    }
    stages {
        stage('Stage 1') {
            steps {
                echo 'Hello world!' 
            }
        }
        stage('Checkout') { 
            steps {
              git branch: 'master', credentialsId: 'c75f4dce-eaa5-4c6a-831f-9c5f15732c58', url: 'git@gitlab.direa.synology.me:cruzapim-k8s/authserver.git'
            }
        }
        stage ('Build'){
          steps {
             sh 'mvn clean package -Dcheckstyle.skip -Dspotbugs.skip -Dpmd.skip -DskipTests'
          }
          //sh "mvn -v"
          //sh "mvn clean"
          //sh "mvn build"
        }
        
        //  steps {
        //        jacoco execPattern: '**/build/jacoco/*.exec',
        //                classPattern: '**/build/classes/java,**/build/classes/groovy',
        //                inclusionPattern: '**/*.class',
        //                exclusionPattern: '**/test/**,**/integrationTest**,**/*Test.class,**/Q*.class,**/config/**/*.class',
        //                sourcePattern: '**/src/main/java',
        //                sourceInclusionPattern: '**/*.java',
        //                changeBuildStatus: true,
        //                maximumBranchCoverage: params.MINIMUM_BRANCH_COVERAGE,
        //                minimumBranchCoverage: params.MINIMUM_BRANCH_COVERAGE,
        //                maximumLineCoverage: params.MINIMUM_LINE_COVERAGE,
        //                minimumLineCoverage: params.MINIMUM_LINE_COVERAGE
                       
        //                execPattern: '**/path_to_file/jacoco.exec',
        //             //    classPattern: '**/coverage/**',
        //             //    sourcePattern: '**/coverage/**',
        //             //    inclusionPattern: '**/*.class'
        //     } 
        //  }
        
        /* stage("Build") {
            steps {
                withMaven(mavenSettingsConfig: 'Maven_config') {
                    sh "echo Build"
                    sh "mvn clean package -Dmaven.test.skip=true"
                }
            }
        } */

        /*stage("Delivery To Nexus") {
            steps {
                //withMaven(mavenSettingsConfig: 'Maven_config') {
                    sh "mvn deploy -Dmaven.test.skip=true"
                    sh "echo Delivery"
                //}
            }
        }*/
        /*stage('Deploy') {
          steps {
              sshagent(credentials : ['1db082f4-6b48-4298-9bbe-e937287a74a7']) {
                    sh 'ls /home/direa'
                    // sh 'ssh -tt apim@220.75.198.106 -p96'
                    sh 'ssh apim@192.168.1.96 ls /home'
                    echo pwd()
                    echo 'Test SSH done'
                    //sh 'ssh id@host mkdir -p /home/cnabro/deploy/dobby-work'
                    //sh 'scp -r ./public id@host:/home/cnabro/deploy/dobby-work'
                }
           }
       }*/
       /*************** Pulish Over SSH Plug in사용******************/
        stage('SSH transfer') {
            when {
              expression {
                currentBuild.result == null || currentBuild.result == 'SUCCESS'
              }
            }
            steps([$class: 'BapSshPromotionPublisherPlugin']) {
                sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: "test-server",//Jenkins 시스템 정보에 사전 입력한 서버 ID
                            verbose: true,
                            transfers: [
                                sshTransfer(
                                    //sourceFiles: "${env.warname}.tar.gz", //전송할 파일
                                    //removePrefix: "", //파일에서 삭제할 경로가 있다면 작성
                                    //remoteDirectory: "/sorc001/temp/" //배포할 위치
                                    execCommand: "ls -al /home/apim" //원격지에서 실행할 커맨드
  )
                            ]
                        )
                    ]
                )
            }
        }
        //

    }
}
